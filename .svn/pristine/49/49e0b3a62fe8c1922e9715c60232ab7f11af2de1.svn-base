package com.xray.taoke.jdapi;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.xray.act.exception.RtException;
import com.xray.act.service.RedisService;
import com.xray.act.service.RedisServiceFactory;
import com.xray.act.util.StringUtil;
import com.xray.taoke.act.service.MpInfoService;
import com.xray.taoke.jdapi.vo.JdItemVo;
import com.xray.taoke.tkapi.vo.ConstTk;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.Pipeline;

public class JdItemService {
	private static Logger logger = LoggerFactory.getLogger(JdItemService.class);
	private static RedisService cache = RedisServiceFactory.getDefaulInstance();

	private static final String prefix = ConstTk.config.get("redis.prefix") + ".jditem.";
	private static final int timeout = 86400;

	public static JdItemService instance = new JdItemService();

	public void addItemListVo(String lid, List<JdItemVo> list) {
		String list_key = prefix + "lid." + lid;
		Jedis jedis = cache.getJedisClient();
		try {
			String item_key = null;
			Pipeline p = jedis.pipelined();
			for (JdItemVo data : list) {
				item_key = prefix + data.getItemid() + ".vo";
				p.setex(item_key, timeout, JSONObject.toJSONString(data));
				p.lpush(list_key, data.getItemid());
			}
			p.expire(list_key, timeout);
			p.sync();
			logger.info("add itemlist,lid:{}, size:{}", lid, list.size());
		} finally {
			cache.returnResource(jedis);
		}
	}

	public List<JdItemVo> getItemListVo(String lid, int page) {
		String list_key = prefix + "lid." + lid;

		String item_key = null;
		List<JdItemVo> list = new ArrayList<JdItemVo>();
		List<String> itemidList = cache.lrange(list_key, (page - 1) * 10, page * 10 - 1);
		for (String itemid : itemidList) {
			item_key = prefix + itemid + ".vo";
			list.add(JSONObject.parseObject(cache.get(item_key), JdItemVo.class));
		}
		return list;
	}

	public List<JdItemVo> getAllItemListVo(String lid) {
		String list_key = prefix + "lid." + lid;

		String item_key = null;
		List<JdItemVo> list = new ArrayList<JdItemVo>();
		List<String> itemidList = cache.lrange(list_key, 0, -1);
		for (String itemid : itemidList) {
			item_key = prefix + itemid + ".vo";
			list.add(JSONObject.parseObject(cache.get(item_key), JdItemVo.class));
		}
		return list;
	}

	@SuppressWarnings("unused")
	public JdItemVo getItemVo(String appid, String itemid) {
		String key = prefix + itemid + ".vo";
		String val = cache.get(key);
		if (StringUtil.isNotEmpty(val))
			return JSONObject.parseObject(val, JdItemVo.class);

		Map<String, String> map = MpInfoService.instance.getMpInfo(appid);
		JSONObject obj = null;
		try {
			obj = Jd21dsService.instance.getiteminfo(map.get("apikey"), itemid);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		this.doDataErr(obj, appid, itemid);
		JdItemVo data = new JdItemVo();
		JSONArray array = obj.getJSONObject("data").getJSONArray("lists");
		JSONArray couponList = null;
		JSONObject couponInfo_list = null;
		for (int i = 0; i < array.size(); i++) {
			couponInfo_list = array.getJSONObject(i).getJSONObject("couponInfo");
			couponList = couponInfo_list.getJSONArray("couponList");
			if (couponList.size() == 0)
				return null;

			String skuId = obj.getString("skuId");
			String skuName = obj.getString("skuName");
			JSONObject jsonObject = obj.getJSONObject("priceInfo");
			double itemprice = jsonObject.getDoubleValue("price");
			String itempic = obj.getJSONObject("imageInfo").getJSONArray("imageList").getJSONObject(0).getString("url");

			String link = couponList.getJSONObject(0).getString("link");
			double discount = couponList.getJSONObject(0).getDoubleValue("discount");

			data.setItemid(skuId);
			data.setItemtitle(skuName);
			data.setItemprice(itemprice);
			data.setItempic(itempic);
			data.setItemurl(link);
			data.setCpmoney(discount);

		}
		cache.setex(key, JSONObject.toJSONString(data), timeout);
		return data;
	}

	// 自动跟单
	private String calcPidex(String itemid, String openid, String pidex) {
		if (openid == null)
			return null;
		if (StringUtil.isEmpty(pidex))
			return null;
		String key = prefix + itemid + ".pidex.";
		String[] arr = pidex.split(",");
		for (String str : arr) {
			if (cache.exists(key + str.split("_")[3]))
				continue;
			return str;
		}
		return null;
	}

	private void setPidex(String appid, String itemid, String openid, String pid) {
		if (openid == null)
			return;
		String key = prefix + itemid + ".pidex." + pid.split("_")[3];
		cache.setex(key, appid + "," + openid, 1200);
	}

	public String getPidex(String itemid, String adzoneid) {
		String key = prefix + itemid + ".pidex." + adzoneid;
		return cache.get(key);
	}

	public void delPidex(String itemid, String adzoneid) {
		String key = prefix + itemid + ".pidex." + adzoneid;
		cache.delete(key);
	}

	public double getFlrate(double tkmoney) {
		if (tkmoney < 2)
			return 0.81;
		else if (tkmoney < 100)
			return 0.61;
		else
			return 0.51;
	}

	public String getTobjUrl(String appid, String e) {
		StringBuilder sb = new StringBuilder();
		sb.append(MpInfoService.instance.getUrl(appid)).append("/tobj");
		sb.append("?e=").append(e);
		return ConstTk.toShortUrl(sb.toString());
	}

	public String getTsouUrl(String appid, String word) {
		Map<String, String> map = MpInfoService.instance.getMpInfo(appid);
		StringBuilder sb = new StringBuilder();
		sb.append(map.get("url")).append("/tsou");
		sb.append("?sid=").append(map.get("sid"));
		sb.append("&keyword=").append(word);
		sb.append("&xb=").append(System.currentTimeMillis());
		return ConstTk.toShortUrl(sb.toString());
	}

	public String getBindsuccUrl(String appid) {
		StringBuilder sb = new StringBuilder();
		sb.append(MpInfoService.instance.getUrl(appid)).append("/bindsucc");
		return ConstTk.toShortUrl(sb.toString());
	}

	private void doNotaokeErr(JSONObject obj, String appid, String itemid) {
		if (obj.getInteger("code") != 200)
			throw new RtException(ConstTk.notaoke_err,
					"err notaoke,appid:" + appid + ",itemid:" + itemid + ",json:" + obj.toJSONString());
	}

	private void doDataErr(JSONObject obj, String appid, String itemid) {
		if (obj.getInteger("code") != 200)
			throw new RtException(ConstTk.data_err,
					"err code,appid:" + appid + ",itemid:" + itemid + ",json:" + obj.toJSONString());
	}

}
