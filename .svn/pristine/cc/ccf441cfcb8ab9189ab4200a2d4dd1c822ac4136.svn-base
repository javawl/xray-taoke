package com.xray.taoke.admin.service;

import java.util.Map;
import java.util.Set;

import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.jfinal.kit.Prop;
import com.jfinal.kit.PropKit;
import com.xray.act.service.RedisService;
import com.xray.act.service.RedisServiceFactory;
import com.xray.act.util.StringUtil;
import com.xray.taoke.admin.web.controller.vo.LinkItemVo;
import com.xray.taoke.tkapi.TbItemService;
import com.xray.taoke.tkapi.vo.TbItemGy;
import com.xray.taoke.tkapi.vo.TbItemVo;

import redis.clients.jedis.Jedis;
import redis.clients.jedis.Pipeline;

public class LinkInfoService {
    private static RedisService cache = RedisServiceFactory.getDefaulInstance();

    private static final Prop config = PropKit.use("config.properties");
    private static final String prefix = config.get("redis.prefix") + ".linkinfo.";

    public static LinkInfoService instance = new LinkInfoService();

    public void addReport(String userid, String jsonStr) {
        Jedis jedis = null;
        try {
            String key = prefix + userid + ".report";

            jedis = cache.getJedisClient();
            Pipeline pipe = jedis.pipelined();

            String yuexiao = null;
            LinkItemVo data = null;
            JSONObject obj = null;
            JSONArray arr = JSONArray.parseArray(jsonStr);
            for (int i = 0; i < arr.size(); i++) {
                obj = arr.getJSONObject(i);
                data = obj.toJavaObject(LinkItemVo.class);
                if (data.getType() == 2) {
                    if (data.getItemsale() <= 0) {
                        yuexiao = obj.getString("yuexiao").replaceAll("月销 ", "");
                        if (yuexiao.contains("万"))
                            data.setItemsale(Integer.parseInt(yuexiao.replaceAll("万", "0000").replaceAll("\\.", "")));
                        else
                            data.setItemsale(Integer.parseInt(yuexiao));
                    }
                    if (data.getTkrate() <= 0)
                        data.setTkrate(Double.parseDouble(obj.getString("yingxiao").replaceAll("%", "")) / 100.0);
                    if (data.getCpmoney() <= 0)
                        data.setCpmoney(Double.parseDouble(obj.getString("juan").replaceAll("￥", "")));
                    if (data.getItemprice() <= 0)
                        data.setItemprice(data.getCpmoney() + data.getTkprice());

                }
                if (StringUtil.isNotEmpty(data.getItempic()))
                    data.setItempic(data.getItempic().replaceAll("_310x310.jpg", "").replaceAll("_220x220_.webp", ""));
                data.setState(dataRank(data.getCpmoney(), data.getItemsale(), data.getTkmoney()));

                pipe.hset(key, data.getItemid(), data.toJson());
            }
            pipe.sync();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            cache.returnResource(jedis);
        }
    }

    private int dataRank(double cpmoney, int itemsale, double tkmoney) {
        int state = 0;
        if (cpmoney > 30)
            state++;
        if (itemsale >= 1000)
            state++;
        if (tkmoney >= 4)
            state++;
        return state;

    }

    public void delReport(String userid) {
        String key = prefix + userid + ".report";
        cache.delete(key);
    }

    public Map<String, String> getReport(String userid) {
        String key = prefix + userid + ".report";
        return cache.hgetAll(key);
    }

    public String getReport(String userid, String itemid) {
        String key = prefix + userid + ".report";
        return cache.hget(key, itemid);
    }

    public void setReport(String userid, String itemid, String data) {
        String key = prefix + userid + ".report";
        cache.hset(key, itemid, data);
    }

    public void addCart(String userid, String itemid) {
        String key = prefix + userid + ".cart";
        // String key2 = prefix + userid + ".report";
        cache.hset(key, itemid, getReport(userid, itemid));
        // cache.hdel(key2, itemid);
    }

    public void addCartByOne(String userid, String itemid) {
        String key = prefix + userid + ".cart";
        if (cache.hexists(key, itemid)) {
            cache.hdel(key, itemid);
            return;
        }
        cache.hset(key, itemid, getReport(userid, itemid));
    }

    public void addCartByData(String userid, String itemid, String data) {
        String key = prefix + userid + ".cart";
        cache.hset(key, itemid, data);
    }

    public long getCartSzie(String userid) {
        return cache.hlen(prefix + userid + ".cart");
    }

    public Map<String, String> getCart(String userid) {
        String key = prefix + userid + ".cart";
        return cache.hgetAll(key);
    }

    public void delCart(String userid) {
        String key = prefix + userid + ".cart";
        cache.delete(key);
    }

    public String decodeUrl(String id) {
        String key = prefix + "url." + id;
        return cache.get(key);
    }

    public String encodeUrl(String url) {
        String id = "g" + cache.incr(prefix + "url.uuid");
        String key = prefix + "url." + id;
        cache.set(key, url);
        return id;
    }

    public void setPkey(String userid, String pkey) {
        String key = prefix + "pkey";
        cache.hset(key, userid, pkey);
    }

    public String getPkey(String userid) {
        String key = prefix + "pkey";
        String val = cache.hget(key, userid);
        return StringUtil.isNotEmpty(val) ? val : "0";
    }

    public void addOneCartByCommon(String userid, String itemid) {
        String key = prefix + ".cart.all";
        cache.zadd(key, System.currentTimeMillis(), getReport(userid, itemid));
    }

    public long getCartSzieByCommon() {
        return cache.zcard(prefix + ".cart.all");
        // return cache.hlen(prefix + ".cart.all");
    }

    public Set<String> getCartByAll() {
        String key = prefix + ".cart.all";
        // return cache.hgetAll(key);
        return cache.zrevrange(key, 0, -1);
    }

    public void addCartCommonByData(String data) {
        String key = prefix + ".cart.all";
        cache.zadd(key, System.currentTimeMillis(), data);
        // cache.hset(key, itemid, data);
    }

    public void delCartCommon() {
        String key = prefix + ".cart.all";
        cache.delete(key);
    }

    public void addCartCommonByOne(String userid, String itemid) {
        String key = prefix + ".cart.all";
        String data = getReport(userid, itemid);
        if (data == null) {
            String appid = "wx8dd7601283019269";
            TbItemVo tbItemVo = null;
            TbItemGy gy = null;
            try {

                tbItemVo = TbItemService.instance.getItemVo(appid, itemid);
                gy = TbItemService.instance.getItemGy(appid, itemid, null);
                tbItemVo.setCpmoney(gy.getCpmoney());
                tbItemVo.setTkrate(gy.getTkrate());
            } catch (Exception e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            data = JSONObject.toJSONString(tbItemVo);
        }

        if (data != null)
            cache.zrem(key, data);
    }

}
